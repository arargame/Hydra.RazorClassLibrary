@using Hydra.RazorClassLibrary.Utils
@typeparam TTypeOfHtmlElementComponent

@if(HtmlElementComponent==null)
{
    <p>HtmlElementComponent is null</p>
}
else
{
    <div class="container mt-3">
        <div class="card">

            <div class="card-header">
                @HtmlElementComponent.Name
            </div>

            <div class="card-body">
               @*  <DynamicComponent Type="typeof(CheckboxComponent)" /> *@
               @* @HtmlElementComponent.Content *@
                @ChildContent
            </div>

            <div class="card-footer">
                <TestElementAttributesTableComponent Debugger="@Debugger"></TestElementAttributesTableComponent>
            </div>
        </div>
    </div>
}



@code {
    [Parameter]
    public HtmlElementComponent<TTypeOfHtmlElementComponent> HtmlElementComponent { get; set; } = default!;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public ComponentDebugger? Debugger { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }


    protected override void OnParametersSet()
    {
        HtmlElementComponent!.ContentChanged -= OnContentChanged;
        HtmlElementComponent!.ContentChanged += OnContentChanged;
    }

    private void OnContentChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}